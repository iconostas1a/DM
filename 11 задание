// код для поиска MST


#include <iostream>
#include <vector>
#include <queue>


void prim(std::vector<std::vector<std::pair<int, int>>>& graph, int v) {

        std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, std::greater<>> q; // для хранения инцедентных ребер
        std::vector<int> dist(graph.size(), INT_MAX);
        std::vector<bool> visited(graph.size(), false);
        std::vector<int> parent(graph.size(), -1);

        q.emplace(v, 0); // vert weight
        dist[v] = 0;

        while (!q.empty()) {
            int a = q.top().first;
            q.pop();

            if (!visited[a]) {
                visited[a] = true;
                if (parent[a] != -1) {
                    std::cout << parent[a] << " - " << a << '\n';
                }
            }

            for (auto &i : graph[a]) {
                int b = i.first;
                int weight = i.second;

                if (!visited[b] and weight < dist[b]) {
                    dist[b] = weight;
                    parent[b] = a;
                    q.emplace(b, dist[b]);
                }
            }

        }

}

int main() {
    int n, m;
    std::cin >> n >> m;
    std::vector<std::vector<std::pair<int, int>>> graph(n);
    for (int i = 0; i < m; ++i) {
        int a, b, weight;
        std::cin >> a >> b >> weight;
        graph[a].emplace_back(b, weight);
        graph[b].emplace_back(a, weight);
    }
    prim(graph, 0);
}


// stdin                        
49 92                           
33 43 531
37 34 1265
37 25 900
37 23 983
37 13 1034
37 46 1734
37 5 721
23 13 311
23 5 473
23 25 287
34 25 513
5 25 189
5 34 556
5 46 1008
34 46 796
28 46 471
36 46 1039
19 46 116
40 46 1317
36 28 479
36 19 824
40 19 201
40 34 689
11 34 632
16 34 571
16 11 353
40 11 328
4 2 683
4 17 569
4 45 1910
4 37 2195
17 2 284
17 45 1298
2 45 1404
17 37 2002
33 37 3123
14 37 1034
14 33 1021
14 43 491
16 12 443
16 31 661
16 6 776
16 26 768
6 26 214
6 31 206
6 15 313
26 15 373
16 15 1054
16 44 960
16 3 674
44 3 847
44 15 568
44 24 240
3 24 652
3 11 287
3 40 79
3 19 244
3 41 451
3 22 1086
41 22 732
41 19 463
22 44 912
22 48 7
22 38 324
22 15 1427
29 15 955
1 15 859
42 15 1250
42 1 616
42 35 622
45 18 1515
45 8 996
18 8 775
36 8 386
39 8 398
32 8 234
32 39 432
32 18 666
39 36 592
39 19 378
39 9 456
39 7 301
39 30 416
7 30 235
9 30 727
9 7 423
9 19 342
9 41 137
39 0 577
30 0 154
32 0 291
18 0 717


stdout
0 - 18
18 - 8
0 - 30
30 - 7
7 - 9
9 - 19
19 - 3
3 - 11
11 - 16
16 - 6
16 - 12
6 - 15
15 - 1
3 - 22
3 - 24
6 - 26
15 - 29
6 - 31
8 - 32
16 - 34
34 - 5
5 - 23
23 - 13
5 - 25
8 - 36
36 - 28
5 - 37
37 - 4
4 - 2
37 - 14
2 - 17
14 - 33
22 - 38
7 - 39
3 - 40
9 - 41
1 - 42
42 - 35
14 - 43
24 - 44
8 - 45
19 - 46
22 - 48
